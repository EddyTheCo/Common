name: push-build-release
on: 
  workflow_call:
    inputs:
      os:
        default: 'ubuntu-latest'
        type: string  
      cmakeArgs:
        default: ''
        type: string
      qtModules:
        default: ''
        type: string 
      qtVersion:
        default: '6.5.0'
        type: string  
      test:
        default: true
        type: boolean  

jobs:
  build_test_package:
    runs-on: ${{ inputs.os }}
    continue-on-error: true  

    steps:
          
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install dependencies on windows
        if: startsWith(inputs.os, 'windows')
        run: |
          choco install ninja cmake
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies on ubuntu
        if: startsWith(inputs.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake doxygen
          
      - name: Install dependencies on macos
        if: startsWith(inputs.os, 'macos')
        run: |
          brew install cmake ninja
          ls  /usr/local/Cellar/openssl@3/3.2.0_1/lib/libcrypto.dylib

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: ${{ inputs.qtVersion }}
          modules: ${{ inputs.qtModules }}  


      - name: Create build directory
        run:  cmake -E make_directory ${{runner.temp}}/build

      - name: Configure
        working-directory: ${{ runner.temp }}/build
        run: qt-cmake -G Ninja -DCMAKE_BUILD_TYPE="release" -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=ON  ${{ inputs.cmakeArgs }} -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/install ${{ github.workspace }}
      
      - name: Build
        working-directory: ${{ runner.temp }}/build
        run: cmake --build .   

      - name: Test
        if: inputs.test
        working-directory: ${{ runner.temp }}/build
        run: ninja test

      - name: Install
        working-directory: ${{ runner.temp }}/build
        run: cmake --install .

      - name: Binary Package Macos
        if: startsWith(inputs.os, 'macos')
        working-directory: ${{ runner.temp }}/build
        run: |
          cpack -B package -G "DragNDrop;TGZ" --config CPackConfig.cmake
          cmake -E remove_directory package/_CPack_Packages

      - name: Binary Package Windows
        if: startsWith(inputs.os, 'windows')
        working-directory: ${{ runner.temp }}/build
        run: |
          cpack -B package -G "NSIS;TGZ" --config CPackConfig.cmake
          cmake -E remove_directory package/_CPack_Packages
      
      - name: Binary Package Ubuntu
        if: startsWith(inputs.os, 'ubuntu')
        working-directory: ${{ runner.temp }}/build
        run: |
          cpack -B package -G "DEB;TGZ" --config CPackConfig.cmake
          cmake -E remove_directory package/_CPack_Packages

      - uses: actions/upload-artifact@v3
        with:
          name: releaseArtifacts 
          path: ${{ runner.temp }}/build/package/* 
      

