name: push-build-release
on:
  workflow_call:
    inputs:
      os:
        default: 'ubuntu-latest'
        type: string
      qtModules:
        default: ''
        type: string 
      qtVersion:
        default: '6.8.1'
        type: string

jobs:
  build_test_package:
    runs-on: ${{ inputs.os }}

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if formatted_code branch exists
        if: ${{ (startsWith(inputs.os, 'ubuntu')) && (startsWith(github.base_ref, 'main')) }}
        run: |
          if git ls-remote --heads origin formatted_code | grep formatted_code; then
              echo "Error: The 'formatted_code' branch exists. Formatting changes are not integrated.";
              exit 1;
          else
              echo "The 'formatted_code' branch does not exist. Proceeding.";
          fi

      - name: Install dependencies on windows
        if: startsWith(inputs.os, 'windows')
        run: |
          choco install ninja cmake
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies on ubuntu
        if: startsWith(inputs.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake doxygen pipx clang-tidy
          pipx install doxyqml
          
      - name: Install dependencies on macos
        if: startsWith(inputs.os, 'macos')
        run: |
          brew install cmake ninja

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: ${{ inputs.qtVersion }}
          modules: ${{ inputs.qtModules }}  
          tools: 'tools_ifw'

      - name: Configure-build-test
        env:
          CPACK_IFW_ROOT: "${{ github.workspace }}/../Qt/Tools/QtInstallerFramework/4.7"
        run: cmake --workflow  --preset default-develop

      - name: Create docs
        if: startsWith(inputs.os, 'ubuntu')
        run: |
          cmake -E make_directory ${{runner.temp}}/common
          cmake --workflow  --preset default-documentation
          cp -r doc/html ${{ runner.temp }}/common/
 
      - name: Clang-tidy
        if: startsWith(inputs.os, 'ubuntu')
        continue-on-error: true
        run: |
          pip3 install pyyaml
          COMPILE_COMMANDS=$(find -name compile_commands.json | head -n 1)
          if [ -z "$COMPILE_COMMANDS" ]; then
            echo "No compile_commands.json found. Skipping clang-tidy-diff."
            exit 0
          fi
          git remote add upstream "https://github.com/${{ github.event.pull_request.base.repo.full_name }}"
          git fetch --no-tags --no-recurse-submodules upstream "${{ github.event.pull_request.base.ref }}"
          git diff -U0 "$(git merge-base HEAD "upstream/${{ github.event.pull_request.base.ref }}")" | clang-tidy-diff -p1 -path "$(dirname "$COMPILE_COMMANDS")" -export-fixes ${{ runner.temp }}/common/clang-fixes.yml


      - name: Qmllint
        if: startsWith(inputs.os, 'ubuntu')
        continue-on-error: true
        run: |
          cmake --workflow  --preset default-qmllint || true
          cp build/default-develop/*_qmllint.json ${{ runner.temp }}/common/ || true
          echo ${{ github.event.number }} >  ${{ runner.temp }}/common/pr_number || true

      - name: Package
        run: |
          cpack --preset default-develop 

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.os }}
          path: build/default-develop/packages-default-develop/*

      - uses: actions/upload-artifact@v4
        if: startsWith(inputs.os, 'ubuntu')
        with:
          name: "common"
          path: |
            ${{ runner.temp }}/common/*
